{"ast":null,"code":"import _slicedToArray from \"/home/mark/React Jobly/react jobly/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from \"react\";\n\nfunction useTimedMessage() {\n  var timeInMsec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var messageShownRef = useRef(false);\n  useEffect(function showSavedMessage() {\n    if (active && !messageShownRef.current) {\n      messageShownRef.current = true;\n      setTimeout(function removeMessage() {\n        setActive(false);\n        messageShownRef.current = false;\n      }, timeInMsec);\n    }\n  }, [active, timeInMsec]);\n  return [active, setActive];\n}\n\nexport default useTimedMessage;","map":{"version":3,"sources":["/home/mark/React Jobly/react jobly/frontend/src/hooks/useTimedMessage.js"],"names":["useRef","useState","useEffect","useTimedMessage","timeInMsec","active","setActive","messageShownRef","showSavedMessage","current","setTimeout","removeMessage"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;;AAEA,SAASC,eAAT,GAA4C;AAAA,MAAnBC,UAAmB,uEAAN,IAAM;;AAC1C,kBAA4BH,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,MAAOI,MAAP;AAAA,MAAeC,SAAf;;AAEA,MAAMC,eAAe,GAAGP,MAAM,CAAC,KAAD,CAA9B;AAEAE,EAAAA,SAAS,CACL,SAASM,gBAAT,GAA4B;AAE1B,QAAIH,MAAM,IAAI,CAACE,eAAe,CAACE,OAA/B,EAAwC;AACtCF,MAAAA,eAAe,CAACE,OAAhB,GAA0B,IAA1B;AACAC,MAAAA,UAAU,CAAC,SAASC,aAAT,GAAyB;AAClCL,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAC,QAAAA,eAAe,CAACE,OAAhB,GAA0B,KAA1B;AACD,OAHS,EAGPL,UAHO,CAAV;AAID;AACF,GAVI,EAWL,CAACC,MAAD,EAASD,UAAT,CAXK,CAAT;AAcA,SAAO,CAACC,MAAD,EAASC,SAAT,CAAP;AACD;;AAED,eAAeH,eAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\nfunction useTimedMessage(timeInMsec = 3000) {\n  const [active, setActive] = useState(false);\n\n  const messageShownRef = useRef(false);\n\n  useEffect(\n      function showSavedMessage() {\n        \n        if (active && !messageShownRef.current) {\n          messageShownRef.current = true;\n          setTimeout(function removeMessage() {\n            setActive(false);\n            messageShownRef.current = false;\n          }, timeInMsec);\n        }\n      },\n      [active, timeInMsec],\n  );\n\n  return [active, setActive];\n}\n\nexport default useTimedMessage;\n"]},"metadata":{},"sourceType":"module"}