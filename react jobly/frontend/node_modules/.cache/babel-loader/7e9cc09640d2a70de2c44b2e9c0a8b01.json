{"ast":null,"code":"import _toConsumableArray from \"/home/mark/React Jobly/react-jobly/my-app-name/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/mark/React Jobly/react-jobly/my-app-name/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/mark/React Jobly/react-jobly/my-app-name/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/mark/React Jobly/react-jobly/my-app-name/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mark/React Jobly/react-jobly/my-app-name/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./Navigation/Navigation\";\nimport Routes from \"./Routes/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\"; // Key name for storing token in localStorage for \"remember me\" re-login\n\nexport var TOKEN_STORAGE_ID = \"jobly-token\";\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      infoLoaded = _useState2[0],\n      setInfoLoaded = _useState2[1];\n\n  var _useState3 = useState(new Set([])),\n      _useState4 = _slicedToArray(_useState3, 2),\n      applicationIds = _useState4[0],\n      setApplicationIds = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentUser = _useState6[0],\n      setCurrentUser = _useState6[1];\n\n  var _useLocalStorage = useLocalStorage(TOKEN_STORAGE_ID),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      token = _useLocalStorage2[0],\n      setToken = _useLocalStorage2[1];\n\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token); // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    function getCurrentUser() {\n      return _getCurrentUser.apply(this, arguments);\n    } // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n\n    function _getCurrentUser() {\n      _getCurrentUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _jwt$decode, username, _currentUser;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!token) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.prev = 1;\n                _jwt$decode = jwt.decode(token), username = _jwt$decode.username; // put the token on the Api class so it can use it to call the API.\n\n                JoblyApi.token = token;\n                _context.next = 6;\n                return JoblyApi.getCurrentUser(username);\n\n              case 6:\n                _currentUser = _context.sent;\n                setCurrentUser(_currentUser);\n                setApplicationIds(new Set(_currentUser.applications));\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(\"App loadUserInfo: problem loading\", _context.t0);\n                setCurrentUser(null);\n\n              case 15:\n                setInfoLoaded(true);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 11]]);\n      }));\n      return _getCurrentUser.apply(this, arguments);\n    }\n\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n  /** Handles site-wide logout. */\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  function signup(_x) {\n    return _signup.apply(this, arguments);\n  }\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  function _signup() {\n    _signup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(signupData) {\n      var _token;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return JoblyApi.signup(signupData);\n\n            case 3:\n              _token = _context2.sent;\n              setToken(_token);\n              return _context2.abrupt(\"return\", {\n                success: true\n              });\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"signup failed\", _context2.t0);\n              return _context2.abrupt(\"return\", {\n                success: false,\n                errors: _context2.t0\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n    return _signup.apply(this, arguments);\n  }\n\n  function login(_x2) {\n    return _login.apply(this, arguments);\n  }\n  /** Checks if a job has been applied for. */\n\n\n  function _login() {\n    _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(loginData) {\n      var _token2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return JoblyApi.login(loginData);\n\n            case 3:\n              _token2 = _context3.sent;\n              setToken(_token2);\n              return _context3.abrupt(\"return\", {\n                success: true\n              });\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"login failed\", _context3.t0);\n              return _context3.abrupt(\"return\", {\n                success: false,\n                errors: _context3.t0\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 8]]);\n    }));\n    return _login.apply(this, arguments);\n  }\n\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n  /** Apply to a job: make API call and update set of application IDs. */\n\n\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([].concat(_toConsumableArray(applicationIds), [id])));\n  }\n\n  if (!infoLoaded) return /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 27\n    }\n  });\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      currentUser: currentUser,\n      setCurrentUser: setCurrentUser,\n      hasAppliedToJob: hasAppliedToJob,\n      applyToJob: applyToJob\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Navigation, {\n    logout: logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Routes, {\n    login: login,\n    signup: signup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mark/React Jobly/react-jobly/my-app-name/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Navigation","Routes","LoadingSpinner","JoblyApi","UserContext","jwt","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","currentUser","setCurrentUser","token","setToken","console","debug","loadUserInfo","getCurrentUser","decode","username","applications","error","logout","signup","signupData","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./Navigation/Navigation\";\nimport Routes from \"./Routes/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}